Right now you can force a draw from the opening with the Amar opening (Nh3, Na3, and going back)

I can play as the computer by using my unmake_move feature (right click)

Need to remove a lot of troublesome lines in the opening book that just straight up hang a piece

To Do:
1. the evaluation hash table only needs to hash the piece locations and the turn, so maybe have a phash
value in the board struct that we update along with the other hash value that just stores this info
2. redo how pins work... its a huge waste of space... I only even need one pin struct since it changes
3. I would like to implement an incrementally updated attack map. This would be generated in the decode_fen function.
Not sure the exact format of this, but I would probably have one for black and white and maybe have a list of pieces 
or something that are attacking that square. https://www.chessprogramming.org/Attack_and_Defend_Maps.
4. Add own pieces and opponent pieces bitboard to board state and then update them in update_boards function with other stuff.
5. Once I have the attack maps, I'll be able to do safe mobility instead of just mobility
6. pawn structure
7. null move heuristic centered around beta.

it might be worth it to see how many total nodes are being evaluated on a given search
to see if move generation speeds are even making a difference there